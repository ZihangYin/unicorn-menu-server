<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>unicorn</groupId>
	<artifactId>menu</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>unicorn-menu</name>

	<properties>
		<jersey.version>2.11</jersey.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!-- Check http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html 
		to see when to use dependencyManagement versus dependencies and when to use 
		scope import -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.glassfish.jersey</groupId>
				<artifactId>jersey-bom</artifactId>
				<version>${jersey.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>2.3.2</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>2.3.2</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- COMPILE DEPENDENCY -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.14.4</version>
		</dependency>

		<dependency>
			<groupId>commons-validator</groupId>
			<artifactId>commons-validator</artifactId>
			<version>1.4.0</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.0</version>
		</dependency>

		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.4</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.libphonenumber</groupId>
			<artifactId>libphonenumber</artifactId>
			<version>6.2.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.0</version>
		</dependency>

		<!-- Comment out jersey-container-grizzly2-http for now. This one depends 
			on grizzly-http-server, which provides HTTP server services using an API 
			very similar to Servlets. -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-grizzly2-http</artifactId>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
		</dependency>

		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk</artifactId>
			<version>1.8.9</version>
		</dependency>

		<!-- Comment out org.slf4j for now. Import to fix the WARN: Failed to load 
			class "org.slf4j.impl.StaticLoggerBinder". This simple logger does not require 
			any configuration and output on STDOUT with INFO level. In order to see DEBUG 
			messages, you would need to pass in this System Property -Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG 
			at your Java startup. <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-simple</artifactId> 
			<version>1.7.5</version> </dependency> -->

		<!-- RUNTIME DEPENDENCY -->
		<!-- TEST DEPENDENCY -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.glassfish.jersey.connectors</groupId>
			<artifactId>jersey-grizzly-connector</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<!-- The maven-compiler-plugin is used to compile the sources of your 
					project. Check http://maven.apache.org/plugins/maven-compiler-plugin for 
					more information -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<inherited>true</inherited>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>

			<!-- The exec-maven-plugin provides java and exec goals to help execute 
				system and Java programs. Check http://mojo.codehaus.org/exec-maven-plugin/index.html 
				for more information -->
			<!-- Execute the application by running "mvn exec:java" -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mainClass>com.unicorn.rest.server.GrizzlyServerOrchestrator</mainClass>
				</configuration>
			</plugin>

			<!-- The Application Assembler plugin is a Maven plugin for generating 
				scripts for starting java applications. All dependencies and the artifact 
				of the project itself are placed in a generated Maven repository in a defined 
				assemble directory. All artifacts (dependencies + the artifact from the project) 
				are added to the classpath in the generated bin scripts. -->
			<!-- Generating the start up script by running "mvn package appassembler:assemble" -->
			<!-- Execute the application by running "sh target/appassembler/bin/startup" -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>1.8.1</version>
				<configuration>
					<!-- set alternative assemble directory -->
					<assembleDirectory>${basedir}/appassembler</assembleDirectory>
					<platforms>
						<platform>unix</platform>
					</platforms>
					<programs>
						<program>
							<mainClass>com.unicorn.rest.server.GrizzlyServerOrchestrator</mainClass>
							<id>startup</id>
							<jvmSettings>
								<initialMemorySize>512m</initialMemorySize>	<!-- -Xms -->
								<maxMemorySize>2048m</maxMemorySize> <!-- -Xmx -->
							</jvmSettings>
						</program>
					</programs>
				</configuration>
			</plugin>

			<!-- We use this plugin to create an executable JAR, one simply needs 
				to set the main class that serves as the application entry point -->
			<!-- Generating the jar file by running "mvn clean package -->
			<!-- Execute the application by running "java -jar target/HelloWorldArtifact-0.0.1-SNAPSHOT.jar" -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.unicorn.rest.server.GrizzlyServerOrchestrator</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
